/* ========= Smooth Scrolling ========= */
document.querySelectorAll('a[href^="#"]').forEach(a => {
  a.addEventListener('click', e => {
    const href = a.getAttribute('href');
    if (!href || href === '#') return;
    const el = document.querySelector(href);
    if (!el) return;
    e.preventDefault();
    el.scrollIntoView({ behavior: 'smooth', block: 'start' });
  });
});

/* ========= Mobile Nav Toggle ========= */
const toggleBtn = document.querySelector('.nav-toggle');
const sideNav = document.querySelector('.side-nav');
if (toggleBtn) {
  toggleBtn.addEventListener('click', () => {
    sideNav.classList.toggle('open');
  });
}

/* ========= Typing Effect ========= */
const typingPhrases = ['Om Kharche', 'an Engineer', 'a Developer', 'an Innovator'];
let tIndex = 0, charIndex = 0, deleting = false;
const typingEl = document.querySelector('.typing');

function typeLoop() {
  const full = typingPhrases[tIndex];
  typingEl.textContent = deleting ? full.slice(0, --charIndex) : full.slice(0, ++charIndex);

  if (!deleting && charIndex === full.length) {
    deleting = true;
    setTimeout(typeLoop, 1100);
  } else if (deleting && charIndex === 0) {
    deleting = false;
    tIndex = (tIndex + 1) % typingPhrases.length;
    setTimeout(typeLoop, 250);
  } else {
    setTimeout(typeLoop, deleting ? 70 : 120);
  }
}
typeLoop();

/* ========= Year ========= */
document.getElementById('year').textContent = new Date().getFullYear();

/* ========= Animate Skill Bars when Visible ========= */
const skills = document.querySelectorAll('.skill-level');
const barObserver = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const target = entry.target;
      const level = target.dataset.level || 0;
      requestAnimationFrame(() => {
        target.style.width = `${level}%`;
      });
      barObserver.unobserve(target);
    }
  });
}, { threshold: 0.4 });
skills.forEach(s => barObserver.observe(s));

/* ========= Scrollspy (active link highlight) ========= */
const sections = document.querySelectorAll('section[id]');
const navLinks = document.querySelectorAll('.side-nav a');
const spyObserver = new IntersectionObserver(entries => {
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      const id = entry.target.getAttribute('id');
      navLinks.forEach(link => {
        link.classList.toggle('active', link.getAttribute('href') === `#${id}`);
      });
    }
  });
}, { rootMargin: '-40% 0px -50% 0px', threshold: 0.01 });
sections.forEach(sec => spyObserver.observe(sec));

/* ========= 3D Tilt on Cards ========= */
function handleTilt(e){
  const rect = this.getBoundingClientRect();
  const x = e.clientX - rect.left, y = e.clientY - rect.top;
  const cx = rect.width / 2, cy = rect.height / 2;
  const rx = ((y - cy) / cy) * -6;         // rotateX
  const ry = ((x - cx) / cx) * 6;          // rotateY
  this.style.transform = `perspective(900px) rotateX(${rx}deg) rotateY(${ry}deg) translateY(-6px)`;
  this.style.boxShadow = '0 28px 60px rgba(0,0,0,.55)';
}
function resetTilt(){
  this.style.transform = '';
  this.style.boxShadow = '';
}
document.querySelectorAll('.tilt, .project-card.card').forEach(card => {
  card.addEventListener('mousemove', handleTilt);
  card.addEventListener('mouseleave', resetTilt);
});

/* ========= Contact Form (demo) ========= */
const form = document.querySelector('.contact-form');
if (form) {
  form.addEventListener('submit', e => {
    e.preventDefault();
    alert('âœ… Message sent! I will get back to you soon.');
    form.reset();
  });
}

/* ========= Particles.js Config ========= */
particlesJS('particles-js', {
  particles: {
    number: { value: 90, density: { enable: true, value_area: 900 } },
    color: { value: '#64ffda' },
    shape: { type: 'circle' },
    opacity: { value: 0.5, random: true },
    size: { value: 3, random: true },
    line_linked: { enable: true, distance: 140, color: '#64ffda', opacity: 0.25, width: 1 },
    move: { enable: true, speed: 1.8, random: false, straight: false, out_mode: 'bounce', bounce: true }
  },
  interactivity: {
    detect_on: 'canvas',
    events: { onhover: { enable: true, mode: 'repulse' }, onclick: { enable: true, mode: 'push' } },
    modes: { repulse: { distance: 110, duration: 0.4 }, push: { particles_nb: 4 } }
  },
  retina_detect: true
});
